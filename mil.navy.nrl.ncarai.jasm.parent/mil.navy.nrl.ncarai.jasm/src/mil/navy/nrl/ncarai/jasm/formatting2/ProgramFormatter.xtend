/*
 * generated by Xtext 2.19.0
 */
package mil.navy.nrl.ncarai.jasm.formatting2

import com.google.inject.Inject
import mil.navy.nrl.ncarai.jasm.program.Bindings
import mil.navy.nrl.ncarai.jasm.program.Block
import mil.navy.nrl.ncarai.jasm.program.BufferPattern
import mil.navy.nrl.ncarai.jasm.program.CaseStatement
import mil.navy.nrl.ncarai.jasm.program.DoWhileStatement
import mil.navy.nrl.ncarai.jasm.program.ForLoopStatement
import mil.navy.nrl.ncarai.jasm.program.Function
import mil.navy.nrl.ncarai.jasm.program.FunctionCallStatement
import mil.navy.nrl.ncarai.jasm.program.IfThenElseStatement
import mil.navy.nrl.ncarai.jasm.program.MatchStatement
import mil.navy.nrl.ncarai.jasm.program.PackageDef
import mil.navy.nrl.ncarai.jasm.program.Pattern
import mil.navy.nrl.ncarai.jasm.program.Program
import mil.navy.nrl.ncarai.jasm.program.ProgramPackage
import mil.navy.nrl.ncarai.jasm.program.RemoveStatement
import mil.navy.nrl.ncarai.jasm.program.RepeatUntilStatement
import mil.navy.nrl.ncarai.jasm.program.RequestStatement
import mil.navy.nrl.ncarai.jasm.program.ReturnStatement
import mil.navy.nrl.ncarai.jasm.program.UntilRepeatStatement
import mil.navy.nrl.ncarai.jasm.program.WaitStatement
import mil.navy.nrl.ncarai.jasm.program.WhileDoStatement
import mil.navy.nrl.ncarai.jasm.services.ProgramGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.jactr.io2.jactr.formatting2.ModelFragmentFormatter

class ProgramFormatter extends ModelFragmentFormatter {

  @Inject ProgramGrammarAccess _grammarAccess

  def dispatch void format(Program program, extension IFormattableDocument document) {
    program.package.format
  }

  def dispatch void format(PackageDef packageDef, extension IFormattableDocument document) {
    for (_import : packageDef.imports) {
      _import.format.append[highPriority; newLine]
    }
//    packageDef.buffers.format
    packageDef.chunkDefs.forEach[chunkDef|chunkDef.format.append[setNewLines(1, 2, 2)]]

    for (chunkType : packageDef.chunkTypes) {
      chunkType.format.append[newLine]
    }
    for (pattern : packageDef.patterns) {
      pattern.format
    }
    for (function : packageDef.functions) {
      function.format
    }
  }

  def dispatch void format(BufferPattern pattern, extension IFormattableDocument document) {
    pattern.regionFor.keyword("(").surround[noSpace]
    pattern.regionFor.keyword(")").prepend[noSpace]
  }

  def dispatch void format(Pattern pattern, extension IFormattableDocument document) {
    pattern.prepend[setNewLines(1, 1, 1)]
    interior(pattern.regionFor.keyword("{").append[newLine], pattern.regionFor.keyword("}").prepend[newLine], [indent])
    for (slot : pattern.slots)
      slot.format
  }

  def dispatch void format(FunctionCallStatement functionCall, extension IFormattableDocument document) {
    functionCall.regionFor.keyword("(").surround[noSpace]
    functionCall.regionFor.keyword(")").prepend[noSpace]
    functionCall.append[newLine]
  }

  def dispatch void format(Function function, extension IFormattableDocument document) {
    function.prepend[setNewLines(1, 2, 2)]
    function.regionFor.feature(ProgramPackage.Literals.FUNCTION__NAME).append[noSpace]

    function.regionFor.keyword("(").surround[noSpace]
    function.regionFor.keyword(")").prepend[noSpace]

    if (function.assumedContents !== null)
      function.assumedContents.regionFor.keyword("with").prepend[newLine].surround[indent]
    if (function.retainedContents !== null)
      function.retainedContents.regionFor.keyword("retain").prepend[newLine].surround[indent]

    interior(function.regionFor.keyword("{").append[newLine], function.regionFor.keyword("}").
      prepend[newLine], [indent])

    for (slot : function.variables)
      slot.append[newLine]

    for (pattern : function.patterns)
      pattern.format

    for (inst : function.instructions)
      inst.format
  }

  def dispatch void format(Block block, extension IFormattableDocument document) {
    interior(block.regionFor.keyword("{").prepend[highPriority; noSpace].append[newLine], block.regionFor.keyword("}").
      prepend[newLine], [indent])
    for (inst : block.instructions)
      inst.format.append[newLine]
  }

  def dispatch void format(ReturnStatement statement, extension IFormattableDocument document) {
    statement.regionFor.keyword("return").prepend[newLine]
  }
  
  def dispatch void format(WaitStatement statement, extension IFormattableDocument document) {
    statement.regionFor.keyword("wait").prepend[newLine]
  }

  def dispatch void format(RemoveStatement statement, extension IFormattableDocument document) {
    statement.regionFor.keywords(",").forEach[region|region.prepend[noSpace].append[oneSpace]]
  }

  def dispatch void format(RequestStatement request, extension IFormattableDocument document) {
    if (request.forced) {
      request.regionFor.keyword("force").prepend[newLine]
      request.regionFor.keyword("request").surround[oneSpace]
    } else
      request.regionFor.keyword("request").prepend[newLine]
    request.regionFor.keyword("(").surround[noSpace]

    if (request.cast === null) {
      request.regionFor.keyword(")").surround[noSpace]
      request?.bindings.format
    } else {
      request.regionFor.keyword(")").prepend[noSpace]
      request?.bindings.format
      request.regionFor.keyword("as").surround[oneSpace]
    }

    try {

      request?.mapping.regionFor.keyword("->")?.surround[indent].prepend[newLine].append[oneSpace].nextSemanticRegion?.
        surround[indent]
      request?.handler.regionFor.keyword("=>")?.surround[indent].prepend[newLine].nextSemanticRegion?.surround[indent]
    } catch (NullPointerException npe) {
      //hack until we can determine why this is being thrown by code generators
    }

    request?.handler?.block.format
    request?.mapping?.block.format
  }

  def dispatch void format(IfThenElseStatement ite, extension IFormattableDocument document) {
//    ite.regionFor.keyword("if").prepend[newLine]
    ite.regionFor.keyword("(").surround[noSpace]
    ite.bindings.format
    ite.regionFor.keyword(")").surround[noSpace]
    ite.thenBlock.format
    if (ite.elseBlock !== null) {
      ite.elseBlock.regionFor.keyword("else").append[noSpace]
      ite.elseBlock.format
    }
  }

  def dispatch void format(ForLoopStatement forLoop, extension IFormattableDocument document) {

    interior(forLoop.regionFor.keyword("(").surround[noSpace], forLoop.regionFor.keyword(")").
      surround[noSpace], [indent])

    var i = 0
    for (region : forLoop.regionFor.keywords(",")) {
      i++
      if (i == 0)
        region.prepend[noSpace].append[newLine]
      else if (i % 2 == 1)
        region.prepend[noSpace].append[newLine]
      else
        region.prepend[noSpace].append[oneSpace]
    }

    forLoop.block.format.prepend[indent]
  }

  def dispatch void format(DoWhileStatement doWhile, extension IFormattableDocument document) {
    doWhile.block.regionFor.keyword("do").prepend[newLine].append[noSpace]
    doWhile.block.format.prepend[indent]

    doWhile.^while.regionFor.keyword("(").surround[noSpace]
    doWhile.^while.regionFor.keyword(")").prepend[noSpace].append[newLine]
//    doWhile.regionFor.keyword("while").prepend[noSpace].append[newLine]
  }

  def dispatch void format(WhileDoStatement doWhile, extension IFormattableDocument document) {
    doWhile.regionFor.keyword("while").prepend[newLine].append[newLine]
    doWhile.^while.regionFor.keyword("(").surround[noSpace]
    doWhile.^while.regionFor.keyword(")").prepend[noSpace].append[newLine]
    doWhile.^while?.bindings.format

    doWhile.block.format.prepend[indent]
  }

  def dispatch void format(RepeatUntilStatement repeatUntil, extension IFormattableDocument document) {
    repeatUntil.regionFor.keyword("repeat").prepend[newLine].append[noSpace]
    repeatUntil.repeat.block.format

    repeatUntil.until.regionFor.keyword("(").surround[noSpace]
    repeatUntil.until.regionFor.keyword(")").prepend[noSpace].append[newLine]
    repeatUntil.regionFor.keyword("until").prepend[noSpace].append[newLine]

    repeatUntil.until.bindings.format
  }

  def dispatch void format(UntilRepeatStatement untilRepeat, extension IFormattableDocument document) {
    untilRepeat.regionFor.keyword("until").prepend[newLine].append[newLine]
    untilRepeat.until.regionFor.keyword("(").surround[noSpace]
    untilRepeat.until.regionFor.keyword(")").prepend[noSpace].append[newLine]

    untilRepeat.until.bindings.format
    untilRepeat.block.format.prepend[indent]
  }

  def dispatch void format(MatchStatement matchStatement, extension IFormattableDocument document) {
    interior(matchStatement.regionFor.keyword("{").append[newLine], matchStatement.regionFor.keyword("}").prepend [
      newLine
    ], [indent])

    for (caseStmt : matchStatement.cases)
      caseStmt.format

    matchStatement.regionFor.keyword("default").prepend[newLine].append[oneSpace]
    matchStatement.regionFor.keyword(":").surround[oneSpace]
    matchStatement.defaultBlock.format
  }

  def dispatch void format(CaseStatement caseStatement, extension IFormattableDocument document) {

    caseStatement.regionFor.keyword("case").prepend[newLine]
    caseStatement.regionFor.keyword(":").surround[oneSpace]
    caseStatement.bindings.format
    caseStatement.block.format
  }

  def dispatch void format(Bindings bindings, extension IFormattableDocument document) {
    bindings.bindings.forEach[binding|binding.format]
  }

// TODO: implement for RepeatUntil, 
}
