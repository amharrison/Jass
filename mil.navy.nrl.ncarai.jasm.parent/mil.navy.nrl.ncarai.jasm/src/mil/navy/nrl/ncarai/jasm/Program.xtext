grammar mil.navy.nrl.ncarai.jasm.Program with org.jactr.io2.jactr.ModelFragment

generate program "http://www.navy.mil/nrl/ncarai/jasm/Program"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.jactr.org/io2/jactr/ModelFragment"

Program:
  package=PackageDef;

PackageDef:
  'namespace' name=QualifiedName 'target' target=QualifiedName '{'
  (imports+=Import | // used for jactr
  includes+=Include)* // used for jasm
  generator=GeneratorDef?
  bufferDefs+=BufferDef*
  (chunkTypes+=ChunkType |
  chunkDefs+=Chunks |
  patterns+=Pattern |
  functions+=Function)*
  '}';

Include:
  'include' importedNamespace=QualifiedNameWithWildcard;

BufferDef:
  name=ID (readable?='readable' | writable?='writable')? (error?='error')? 'requests' requests+=RequestDef (','
  requests+=RequestDef)*;

RequestDef:
  (wildcardRequest?='*' | requestType=[ChunkType]) '->' (wildcardResult?='*' | resultType=[ChunkType])?;

GeneratorDef:
  '@generator' parameters=ParametersBlock;

Pattern:
  name=ID '=' '{' ('isa' type=ID)? // why not [ChunkType] because we need to match to functions too, 
  slots+=ConditionalSlot* // and trying to do both will screw the parser
  '}';

Function:
  'function' (void?='void' | chunk?='element') name=ID '(' ((slots+=VariableStatement) (','
  slots+=VariableStatement)*)?
  ')' (assumedContents=WithAsStatement)? (retainedContents=RetainAsStatement)? '{'
  variables+=VariableStatement*
  patterns+=Pattern*
  instructions+=Instruction+
  '}';

WithAsStatement:
  'with' assumed+=AsStatement (',' assumed+=AsStatement)*;

RetainAsStatement:
  'retain' retained+=AsStatement (',' retained+=AsStatement)*;

AsStatement:
  buffer=[Buffer] 'as' type=ID;

VariableStatement:
  'slot' assignment=AssignmentStatement;

Block:
  {Block} '{'
  instructions+=Instruction+
  '}';

InsertionStatement:
  '<[' entryState=ID ',' exitState=ID (',' shouldGenerate?='generate')? ']>';

Instruction:
  ForLoopStatement | IfThenElseStatement | RequestStatement | FunctionCallStatement |
  ReturnStatement | MatchStatement | OutputStatement | AssignmentStatement | RemoveStatement |
  WhileDoStatement | DoWhileStatement | InsertionStatement | RepeatUntilStatement | UntilRepeatStatement |
  RewardStatement | WaitStatement;

FunctionCallStatement:
  function=[Function] '(' ((parameters+=AssignmentStatement) (',' parameters+=AssignmentStatement)*)? ')';

AssignmentStatement:
  reference=VariableReference
  '='
  assignment=VariableValue;

VariableReference:
  (buffer=[Buffer] '.')? name=ID;

VariableValue:
  ((buffer=[Buffer] '.')? value=Value) | functionCall=FunctionCallStatement;

ReturnVariableReference:
  (buffer=[Buffer] '.')? value=Value;

ReturnStatement:
  {ReturnStatement} 'return' (reference=ReturnVariableReference)?;

RemoveStatement:
  'remove' buffers+=[Buffer] (',' buffers+=[Buffer])*;

RequestStatement:
  (forced?='force')? 'request' buffer=[Buffer] '('
  (patternReference=VariableReference) ')' (',' bindings=Bindings)? ('as'
  cast=ID)? mapping=Mapping? handler=Handler?;

WaitStatement:
  'wait' buffer=[Buffer] handler=Handler?;

RepeatUntilStatement:
  repeat=Repeat until=Until;

UntilRepeatStatement:
  until=Until block=Block;

WhileDoStatement:
  while=While block=Block;

DoWhileStatement:
  'do' block=Block while=While;

Repeat:
  'repeat' block=Block;

RewardStatement:
  'reward' reward=NUMERIC;

Until:
  'until' '(' bindings=Bindings ')';

While:
  'while' '(' bindings=Bindings ')';

MatchStatement:
  'match' '{'
  cases+=CaseStatement
  (cases+=CaseStatement)*
  'default' ':' defaultBlock=Block
  '}';

CaseStatement:
  'case' bindings=Bindings ('[' priority=NUMERIC ']')? ':' block=Block;

OutputStatement:
  'output' '(' string=STRING (',' bindings=Bindings)? ')';

ForLoopStatement:
  (forced?='force')? 'for' '(' forBuffer=[Buffer] ',' initial=[Pattern] ',' initialBindings=Bindings ','
  subsequent=[Pattern] ',' subsequentBindings=Bindings ')'
  block=Block;

IfThenElseStatement:
  'if' '(' bindings=Bindings ')' (thenBlock=Block)
  (=>'else' (elseBlock=Block))?;

Bindings:
  bindings+=BufferPattern ('&&' bindings+=BufferPattern)*;

BufferPattern:
  buffer=[Buffer] '(' pattern=[Pattern]? ')';

Mapping:
  {Mapping} '->' block=Block;

Handler:
  {Handler} '=>' block=Block;
